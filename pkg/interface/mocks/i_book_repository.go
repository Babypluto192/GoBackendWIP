// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	models "GoProjects/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// IBookRepository is an autogenerated mock type for the IBookRepository type
type IBookRepository struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: book
func (_m *IBookRepository) CreateBook(book models.AddBook) (bool, error) {
	ret := _m.Called(book)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(models.AddBook) (bool, error)); ok {
		return rf(book)
	}
	if rf, ok := ret.Get(0).(func(models.AddBook) bool); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(models.AddBook) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBook provides a mock function with given fields: id
func (_m *IBookRepository) DeleteBook(id string) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBook")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBooks provides a mock function with no fields
func (_m *IBookRepository) GetAllBooks() ([]models.Book, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllBooks")
	}

	var r0 []models.Book
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Book, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Book)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookById provides a mock function with given fields: id
func (_m *IBookRepository) GetBookById(id string) (models.Book, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBookById")
	}

	var r0 models.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Book, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Book); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Book)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: id, book
func (_m *IBookRepository) UpdateBook(id string, book models.AddBook) (bool, error) {
	ret := _m.Called(id, book)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, models.AddBook) (bool, error)); ok {
		return rf(id, book)
	}
	if rf, ok := ret.Get(0).(func(string, models.AddBook) bool); ok {
		r0 = rf(id, book)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, models.AddBook) error); ok {
		r1 = rf(id, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIBookRepository creates a new instance of IBookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBookRepository {
	mock := &IBookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
